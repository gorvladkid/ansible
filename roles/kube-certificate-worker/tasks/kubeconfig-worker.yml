---
- name: Create kubeconfig directory
  file:
    path: "{{ certificate_dir }}/kubeconfig"
    state: directory
    recurse: yes

- name: Get master server address
  set_fact:
    master_ip: "{{ master_ip + hostvars[item]['kvm_ip'] }} "
  with_items: "{{ groups[master_group] }}"

- name: Get worker server address
  set_fact:
    worker_ip: "{{ worker_ip + hostvars[item]['kvm_ip'] }} "
  with_items: "{{ groups[worker_group] }}"

- name: Generate kubeconfig for kubeproxy
  args:
    chdir: "{{ certificate_dir }}/kubeconfig"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ certificate_dir }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_port }} \
        --kubeconfig=kube-proxy.kubeconfig

    kubectl config set-credentials system:kube-proxy \
        --client-certificate={{ certificate_dir }}/certificates/kube-proxy/kube-proxy.pem \
        --client-key={{ certificate_dir }}/certificates/kube-proxy/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig

    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig

    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: generate kubeconfig for kubelet master
  args:
    chdir: "{{ certificate_dir }}/kubeconfig/"
  shell: |
    for instance in {{ master_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ certificate_dir }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_port }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate={{ certificate_dir }}/certificates/kubelet/${instance}.pem \
        --client-key={{ certificate_dir }}/certificates/kubelet/${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubelet worker
  args:
    chdir: "{{ certificate_dir }}/kubeconfig/"
  shell: |
    for instance in {{ worker_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ certificate_dir }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_port }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate={{ certificate_dir }}/certificates/kubelet/${instance}.pem \
        --client-key={{ certificate_dir }}/certificates/kubelet/${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

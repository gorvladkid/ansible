---
- name: Create kubeconfig directory
  file:
    path: "{{ certificate_dir }}/kubeconfig/.kube"
    state: directory
    recurse: yes

- name: Generate kubeconfig for client
  args:
    chdir: "{{ certificate_dir }}/kubeconfig/"
  shell: |
    kubectl config set-cluster {{ cluster_name }} \
        --certificate-authority={{ certificate_dir }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_port }} \
        --kubeconfig=client.kubeconfig

    kubectl config set-credentials admin \
        --client-certificate={{ certificate_dir }}/certificates/kubernetes-admin/kubernetes-admin.pem \
        --client-key={{ certificate_dir }}/certificates/kubernetes-admin/kubernetes-admin-key.pem \
        --embed-certs=true \
        --kubeconfig=client.kubeconfig

    kubectl config set-context {{ cluster_name }} \
        --cluster={{ cluster_name }} \
        --user=admin \
        --kubeconfig=client.kubeconfig

    kubectl config use-context {{ cluster_name }} --kubeconfig=client.kubeconfig

- name: Copy client.kubeconfig to .kube directory
  copy:
    src: "{{ certificate_dir }}/kubeconfig/client.kubeconfig"
    dest: "{{ certificate_dir }}/kubeconfig/.kube"

# - name: Generate kubeconfig for client oidc
#   args:
#     chdir: "{{ certificate_dir }}/kubeconfig/"
#   shell: |
#     kubectl config set-cluster {{ cluster_name }} \
#         --certificate-authority={{ certificate_dir }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
#         --embed-certs=true \
#         --server=https://{{ virtual_ip }}:{{ virtual_port }} \
#         --kubeconfig=client-oidc.kubeconfig
#   when: kubernetes.addonsComponents.oidc.enabled
